{"version":3,"sources":["components/Header/header.module.css","components/recipe.module.css","components/Header/logo1.png","components/Recipe.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipebox","text","map","ingredient","Math","trunc","src","alt","Header","useState","search","setSearch","recipe","setRecipe","query","setQuery","useEffect","a","fetch","response","json","data","hits","FetchData","App","header","onSubmit","e","preventDefault","searchForm","require","logo","searchBar","type","value","onChange","target","placeholder","searchButton","List","recipeitem","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,2BAA2B,UAAY,0BAA0B,aAAe,6BAA6B,KAAO,uB,gBCAzOD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,MAAQ,sBAAsB,KAAO,qBAAqB,SAAW,2B,6ECD3JD,EAAOC,QAAU,IAA0B,mC,gJCkB5BC,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAWC,IAAMC,WACpB,wBAAIF,UAAWC,IAAML,OAAQA,GAC7B,wBAAII,UAAWC,IAAME,MAClBJ,EAAYK,KAAI,SAACC,GAAD,OACf,4BAAKA,EAAWF,UAGpB,uBAAGH,UAAWC,IAAMJ,UAApB,aAAyCS,KAAKC,MAAMV,IACpD,yBAAKG,UAAWC,IAAMH,MAAOU,IAAKV,EAAOW,IAAI,O,gBCoDpCC,EA7DA,WACb,IADmB,EAISC,mBAAS,IAJlB,mBAIZC,EAJY,KAIJC,EAJI,OAKSF,mBAAS,IALlB,mBAKZG,EALY,KAKJC,EALI,OAMOJ,mBAAS,IANhB,mBAMZK,EANY,KAMLC,EANK,KAQnBC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OACSJ,EADT,mBATlB,WASkB,oBARhB,qCAOI,cACVK,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBR,EAAUQ,EAAKC,MALC,2CAAH,qDAOfC,KACC,CAACT,IAWJ,OACE,yBAAKhB,UAAWC,IAAMyB,KACpB,yBAAK1B,UAAWC,IAAM0B,QACpB,0BAAMC,SARS,SAACC,GACpBA,EAAEC,iBACFb,EAASL,GACTC,EAAU,KAKwBb,UAAWC,IAAM8B,YAC7C,yBAAKvB,IAAKwB,EAAQ,IAAgBhC,UAAWC,IAAMgC,OACnD,2BACEjC,UAAWC,IAAMiC,UACjBC,KAAK,OACLC,MAAOxB,EACPyB,SAlBW,SAACR,GACpBhB,EAAUgB,EAAES,OAAOF,QAkBXG,YAAY,oBAGd,4BAAQvC,UAAWC,IAAMuC,aAAcL,KAAK,UAA5C,YAKJ,yBAAKnC,UAAWC,IAAMwC,MACnB3B,EAAOV,KAAI,SAACsC,GAAD,OACV,kBAAC,EAAD,CACEC,IAAKD,EAAW5B,OAAO8B,MACvBhD,MAAO8C,EAAW5B,OAAO8B,MACzB/C,SAAU6C,EAAW5B,OAAOjB,SAC5BC,MAAO4C,EAAW5B,OAAOhB,MACzBC,YAAa2C,EAAW5B,OAAOf,oBCjD5B2B,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCOWmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ba071ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"header_App__1CB20\",\"header\":\"header_header__312WS\",\"logo\":\"header_logo__1qIWU\",\"searchForm\":\"header_searchForm__1x9uK\",\"searchBar\":\"header_searchBar__2cQIy\",\"searchButton\":\"header_searchButton__2NNyT\",\"List\":\"header_List__36rva\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipebox\":\"recipe_recipebox__3B6JG\",\"image\":\"recipe_image__283FI\",\"title\":\"recipe_title__2yYBb\",\"text\":\"recipe_text__2mhpY\",\"calories\":\"recipe_calories__2iba_\"};","module.exports = __webpack_public_path__ + \"static/media/logo1.c0a8671b.png\";","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className={style.recipebox}>\r\n      <h1 className={style.title}>{title}</h1>\r\n      <ul className={style.text}>\r\n        {ingredients.map((ingredient) => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ul>\r\n      <p className={style.calories}>Calories: {Math.trunc(calories)}</p>\r\n      <img className={style.image} src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Recipe from \"../Recipe\";\r\nimport style from \"../Header/header.module.css\";\r\n\r\nconst Header = () => {\r\n  const My_id = \"fc4407ee\";\r\n  const App_key = \"62bf3a45607ac3710b0324dce2aa9a57\";\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [recipe, setRecipe] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const FetchData = async () => {\r\n      const response = await fetch(\r\n        `https://api.edamam.com/search?q=${query}&app_id=${My_id}&app_key=${App_key}`\r\n      );\r\n      const data = await response.json();\r\n      setRecipe(data.hits);\r\n    };\r\n    FetchData();\r\n  }, [query]);\r\n\r\n  const ChangeSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const SearchButton = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch(\"\");\r\n  };\r\n  return (\r\n    <div className={style.App}>\r\n      <div className={style.header}>\r\n        <form onSubmit={SearchButton} className={style.searchForm}>\r\n          <img src={require(\"./logo1.png\")} className={style.logo} />\r\n          <input\r\n            className={style.searchBar}\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={ChangeSearch}\r\n            placeholder=\"type for Search\"\r\n          />\r\n\r\n          <button className={style.searchButton} type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className={style.List}>\r\n        {recipe.map((recipeitem) => (\r\n          <Recipe\r\n            key={recipeitem.recipe.label}\r\n            title={recipeitem.recipe.label}\r\n            calories={recipeitem.recipe.calories}\r\n            image={recipeitem.recipe.image}\r\n            ingredients={recipeitem.recipe.ingredients}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport \"./App.css\";\n\nconst App = () => {\n  return <Header />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}